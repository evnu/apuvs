Erlang is a general-purpose concurrent, garbage-collected programming language and runtime
system. The sequential subset of Erlang is a functional language, with strict evaluation,
single assignment, and dynamic typing. For concurrency it follows the Actor model. It
was designed by Ericsson to support distributed, fault-tolerant, soft-real-time,
non-stop applications. The first version was developed by Joe Armstrong in 1986.[1] It
supports hot swapping, thus code can be changed without stopping a system.[2] It was
originally a proprietary language within Ericsson, but was released as open source in
1998.

While threads are considered a complicated and error-prone topic in most languages,
Erlang provides language-level features for creating and managing processes with the aim
of simplifying concurrent programming. Though all concurrency is explicit in Erlang,
processes communicate using message passing instead of shared variables, which removes
the need for locks.
