Die Implementierung eines C++-Compilers gilt als aufwändig. Seit der
Fertigstellung der Sprachnorm 1998 dauerte es mehrere Jahre, bis die Sprache von
C++-Compilern weitestgehend unterstützt wurde.
Zu den bedeutendsten C++-Compilern gehören:
Der g++ ist die C++-Ausprägung der GNU Compiler Collection (GCC); g++ ist
quelloffen, frei verfügbar. Der g++ unterstützt viele Betriebssysteme (darunter
Unix, Linux, Mac OS X, Windows und AmigaOS) und Prozessorplattformen. Derzeit
dient eine Sonderanfertigung des Compilers namens ConceptGCC als Prüfmittel für
verschiedene geplante C++-Spracherweiterungen. GNU C++ existiert seit 1987 und
ist somit einer der ältesten C++-Compiler.[1]
Der in Microsoft Visual C++ enthaltene Compiler ist einer der verbreitetsten für
das Betriebssystem Windows.
Der Comeau C++ ist derzeit der einzige Compiler, der export von Templates
integriert hat und damit der einzige, der alle C++-Sprachmittel enthält. Das so
genannte „Front-End“ des Compilers, also der Teil, der die Analyse-Phase
implementiert, wurde von der Firma Edison Design Group (EDG) erstellt, die sich
auf die Entwicklung von Compiler-Front-Ends spezialisiert hat und deren
C++-Front-End auch in vielen anderen kommerziellen C++-Compilern integriert ist.
Der Comeau-Compiler kann auch über das Internet ausprobiert werden.
Der Intel C++ Compiler verwendet ebenfalls das erwähnte C++-Front-End von EDG.
Der Intel C++ Compiler erzeugt Maschinencode für die Intel-Prozessoren unter den
Betriebssystemen Windows, Linux und MacOS X. Da die mit dem Intel C++ Compiler
erzeugten Programme den Befehlssatz der Intel-Prozessoren besonders gut
ausnutzen, erzeugen sie besonders effiziente Programme für Intel-Prozessoren.
Der Borland C++ Builder ist ein im Developer Studio enthaltener C++-Compiler.
